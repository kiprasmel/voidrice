#!/bin/bash
# git-wrapper
#
# Edit: This is kinda bloat and I don't use really use it anymore.
# It's mean to be sourced.
#
# Originally by Kipras Melnikovas (kipras.org) <kipras@kipras.org>
#
# this is somewhat of a git's 'pre-checkout' hook
# I wish that git implemented it by default
# this one protects from `git checkout -- <foo>` and/or `git checkout -- .`
#
# Credits:
# [1] check if something is an alias: https://stackoverflow.com/a/9783627/9285308
# [2] single quote (') escaping in sed: https://stackoverflow.com/a/18274451
# [3] checking if argv contains a specific command: https://stackoverflow.com/a/47789975/9285308
#

# check if git exists
# TODO improve this checking
$(git --help >/dev/null 2>&1) && gitExists="true" || gitExists="false"
#printf "gitExists $gitExists\n"

if [ "$gitExists" = "true" ]; then
	# Get git's command. Might be aliased
	gitCmd="$(command -v git)"

	# Check if git is aliased [1]
	$(alias git 2>/dev/null >/dev/null) && gitIsAliased="true" || gitIsAliased="false"
	#printf "gitIsAliased $gitIsAliased \n"

	if [ "$gitIsAliased" = "true" ]; then
		# extract the alias [2]. E.g.: alias git='hub' => hub
		trueGit="$(printf "$gitCmd" | sed 's|alias git='\''\(.*\)'\''|\1|g;')"

	elif [ "$gitIsAliased" = "false" ]; then
		# might be /usr/bin/git etc.
		trueGit="$gitCmd"
	fi

	#printf "trueGit = $trueGit\n"

	### ---

	gitWrapper() {
	## Add another case for every `git checkout` alias you have in your .gitconfig

	if [[ " $@ " =~ " checkout -- " ]] || [[ " $@ " =~ " co -- " ]] ; then
		if [[ " $@ " = " checkout -- . " ]] || [[ " $@ " =~ " co -- . " ]]; then
			# VERY dangerous (whole directory)
			printf "==> Detected 'checkout -- .'\n"
			printf " :: This will OVERRIDE **ALL** changes PERMANENTLY!!!"
		else
			# Quite dangerous (will override, but not whole directory)
			printf "==> Detected 'checkout --'\n"
			printf " :: This will OVERRIDE the file(s) PERMANENTLY!"
		fi

		# needed if `--git-dir` or `--work-tree` or similar commands are provided
		modifiedGitCaller="$trueGit"

		if [ $# -gt 1 ]; then
			for option in "$@"; do
				#echo "option $option";
				[[ "$option" =~ ^--.+ ]] && modifiedGitCaller="$modifiedGitCaller $option"
			done
			#echo "modifiedGitCaller $modifiedGitCaller"
		fi

		printf "\n\n"

		while
			printf "==> Are you SURE you want to continue? [yes/NO]: "
			read choice
			[ "$choice" = "y" ] || [ "$choice" = "Y" ] || [ "$choice" = "ye" ] || [ "$choice" = "Ye" ]
		do
			continue
		done

		if  [ "$choice" = "yes" ] || [ "$choice" = "Yes" ] || [ "$choice" = "YES" ]; then
			printf "\n==> I sure hope you know what you are doing...\n\n"
			$modifiedGitCaller stash -u
			printf "\n==> Created a backup stash & probably saved yo butt...\n"
			printf " :: Find it using 'git stash list'\n"

			$modifiedGitCaller stash apply >/dev/null 2>&1
			printf " :: Applied the stash to make changes\n"

			command "$trueGit" "$@"
			printf " :: Executed the command\n"
		else
			printf "\n==> Aborting\n" && return 1
		fi

		printf "\n==> Done\n"

	# default case - we did NOT match `checkout --` nor `checkout -- .`
	# put any wrappers / handlers before this.
	else
		# pass the command back to git
		command "$trueGit" "$@"
	fi
	} # end gitWrapper()

	### ---

	### TODO figure out a way to declare a function from a variable

	### EDIT - we should NOT do that.
	### See https://stackoverflow.com/a/48054874/9285308

	### ---

	if [ "$trueGit" = "git" ]; then
		git() {
			gitWrapper "$@"
		}

	elif [ "$trueGit" = "hub" ]; then
		hub() {
			gitWrapper "$@"
		}

	### add any other potential
	### git's commands that could be aliased
	### here

	#	elif [ "$trueGit" = "yetAnotherAlias" ]; then
	#		yetAnotherAlias() {
	#			gitWrapper "$@"
	#		}

	fi # end #trueGit check

fi # end $gitExists check

