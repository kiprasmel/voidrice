#!/bin/sh

## explanations
#
# config: https://wiki.archlinux.org/index.php/Dotfiles#Tracking_dotfiles_directly_with_Git
#
# git=hub https://github.com/github/hub
#
# config='/usr/bin/hub --git-dir=$HOME/.dotfiles/ --work-tree=$HOME' \
#
# `cl` / `cliboard` => `npm i -g clipboard-cli`
#
# `sv` => `sudoedit` instead of `sudo nvim`:
# read https://wiki.archlinux.org/index.php/Security#Editing_files_using_sudo

# Use neovim for vim if present.
[ -x "$(command -v nvim)" ] && alias vim="nvim" vimdiff="nvim -d"

alias ka="killall" \
	Q="cd / && $HOME/.local/bin/tools/ecryptfs-unmount && i3-msg exit" \
	calcurse="calcurse -D ~/.config/calcurse" \
	f="$FILE" \
	p="pacman" \
	sp="sudo pacman" \
	S="systemctl --user" \
	SS="sudo systemctl" \
	sd="shutdown" \
	sad="shutdown 0" \
	co="config" \
	cl="clipboard" \
	d="docker" \
	hogs-docker='docker stats --format "table {{.CPUPerc}}\t{{.Name}}" --no-stream | grep -v "CPU\|0.00" | sort -nr | head -n 10' \
	r="ranger" \
	k="kubectl" \
	m="minikube" \
	le="lerna" \
	compass="mongodb-compass" \
	h="grep -Hr" \
	trem="transmission-remote" \
	dp="dolphin" \
	dp.="dolphin ." \
	v="$EDITOR" \
	sv="sudoedit" \
	sdn="sudo shutdown -h now" \
	gua="git remote | xargs -L1 git push --all" \
	ls="LC_COLLATE=C ls -hN --color=auto --group-directories-first" \
	la="ls -lAFs" \
	ll="ls -l --all --size --group-directories-first --human-readable --classify --color=auto" \
	l="ll" \
	lc="ll -C" \
	L="clear && l" \
	xls="/bin/ls" \
	lsd="lsd --group-dirs first --classify --icon-theme unicode" \
	lcd="lsd --icon-theme fancy" \
	lad="lsd -la --icon-theme fancy" \
	lld="lad" \
	l1d="lsd --classic --icon never -1" \
	quit="exit" \
	q="exit" \
	cls="clear" \
	c.="vscodium . && exit" \
	gpgkeys="gpg --list-secret-keys --keyid-format LONG" \
	gpgreload="gpg-connect-agent reloadagent /bye" \
	yv="yarn version" \
	ref="shortcuts >/dev/null; source ~/.config/shortcutrc" \
	upc="sudo pacman -Syu; pkill -RTMIN+8 i3blocks" \
	lsp="pacman -Qett --color=always | less" \
	ffmpeg="ffmpeg -hide_banner" \
	chrome="nohup google-chrome-stable & disown" \
	ce="chrome && exit 0" \
	queota="printf \"want some?\n\"" \
	scim="sc-im" \
	py="python" \
	acl="arduino-cli" \
	ac="arduino-cli" \
	lol="sudo sh -c 'echo \"abi.vsyscall32 = 0\" >> /etc/sysctl.conf && sysctl -p;'" \
	ws="wifi-check" \
	wr="wifi-restart"

# Verbosity and settings that you pretty much just always are going to want.
alias \
	batt="cat /sys/class/power_supply/BAT?/capacity" \
	cp="cp -v" \
	mv="mv -v" \
	mkd="mkdir -pv" \
	yta="yt -x -f bestaudio/best" \
	ffmpeg="ffmpeg -hide_banner"
	#yt="yt-dlp --embed-metadata -i" \

# Colorize commands when possible.
alias \
	grep="grep --color=auto" \
	diff="diff --color=auto" \
	ccat="highlight --out-format=ansi" \
	ip="ip -color=auto"

# These common commands are just too long! Abbreviate them.
alias \
	ka="killall" \
	trem="transmission-remote" \
	YT="youtube-viewer" \
	sdn="sudo shutdown -h now" \
	f="$FILE" \
	v="$EDITOR" \
	p="pacman" \
	xi="sudo xbps-install" \
	xq="xbps-query"
	# xr="sudo xbps-remove -R" \

alias \
	lf="lfub" \
	magit="nvim -c MagitOnly" \
	ref="shortcuts >/dev/null; source ${XDG_CONFIG_HOME:-$HOME/.config}/shortcutrc ; source ${XDG_CONFIG_HOME:-$HOME/.config}/zshnameddirrc" \
	weath="less -S ${XDG_DATA_HOME:-$HOME/.local/share}/weatherreport" \
	# tmux="tmux -f ${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tmux.conf"

# This alias is important. It enables the `pauseallmpv` command.
alias mpv="mpv --input-ipc-server=/tmp/mpvsoc$(date +%s)"

# Removed because of https://github.com/nvbn/thefuck/issues/1018
### https://github.com/nvbn/thefuck
### eval $(thefuck --alias)



# Utility variables
# not meant to be used in scripts, rather - directly in the command line
# as a shortcut,
# e.g.: git push $nv
export nv=--no-verify



# Functions & stuff

ee() {
	emacs &
	disown
}

a() {
	emacsclient -t $* || { emacs --daemon && emacsclient -t $* }
}

cr() { sudo vscodium --user-data-dir $HOME/.config/VSCodium/ --extensions-dir $HOME/.vscode-oss/extensions $* }
vscr() { cr }
vsr() { cr }

# function is better than an alias
# note - do NOT quote the '$*'!
# (allows better auto-completions & compatibility etc)
# see https://github.com/tj/git-extras/issues/797
#
# see also https://stackoverflow.com/a/6992428/9285308
# if interested why we're putting arguments in arrays
#
__gitwrap() {
	[ -n "$GPG_SIGNING_KEY" ] && local EXTRA_ARGS=("-c" "user.signingkey=$GPG_SIGNING_KEY")

	local GIT_CLI
	if command -v hub >/dev/null; then
		GIT_CLI=("/usr/bin/env" "hub")
	else
		GIT_CLI=("/usr/bin/env" "git")
	fi

	[ -n "$SHOW_GIT_CMD" ] && echo \
	"${GIT_CLI[@]} ${EXTRA_ARGS[@]} $* \n"

	${GIT_CLI[@]} ${EXTRA_ARGS[@]} $*
}

git() {
	__gitwrap $*
}
compdef git="git"
#compdef git="hub"

g() {
	__gitwrap $*
}
compdef g="git"

gnp() {
	__gitwrap --no-pager $*
}
compdef gnp="git"

config() {
	__gitwrap --git-dir="$HOME/.dotfiles/" --work-tree="$HOME" $*
}
compdef config="git"

# Fast clipboard copying
# -r removes the last newline! https://stackoverflow.com/a/43830018/9285308
clip() { xclip -r -selection c ;}      # pipe  into  me
copy() { xclip -r -selection c "$1" ;} # gimme the file

pbpaste()     { xclip -r -selection clipboard -o }
pbpasteprim() { xclip -r -selection primary   -o }

primtoclip()  { printf "$(pbpasteprim)" | clip   }
primtocopy()  { printf "$(pbpasteprim)" | clip   }
p2c()         { printf "$(pbpasteprim)" | clip   }


cg() {
	case "$OSTYPE" in
		darwin*) pbcopy < .git/COMMIT_EDITMSG ;;
			  *)   copy   .git/COMMIT_EDITMSG ;;
	esac
}

# calls aliases. See https://github.com/sarpik/voidrice/blob/master/.gitconfig
gs() { __gitwrap s $* }
cos() { config s $* }
cop() { config p $* }
coc() { config c $* }
cod() { config d $* }
gso() { __gitwrap so $* }
gsod() { __gitwrap sod $* }
gsoc() { __gitwrap soc $* }
gd() { __gitwrap d $* }
gds() { __gitwrap ds $* }
gdd() { __gitwrap dd $* }
gg() { __gitwrap s $* }
ggg() { __gitwrap s $* }
gggg() { __gitwrap s $* }
ggggg() { __gitwrap s $* }
s() { __gitwrap s $* }
gcl() { __gitwrap cl $* }
gp() { __gitwrap p $* }
gpf() { __gitwrap pf $* }
gpa() { __gitwrap pa $* }
gpar() { __gitwrap par $* }
gparw() { __gitwrap parw $* }
gpad() { __gitwrap pad $* }
gpado() { __gitwrap pado $* }
gpaod() { __gitwrap pado $* }
gpadom() { __gitwrap padom $* }
gpadd() { __gitwrap padd $* }
gpp() { __gitwrap pp $* }
gpl() { __gitwrap pl $* }
gf() { __gitwrap f $* }
gfa() { __gitwrap fa $* }
gfariom() { __gitwrap fariom $* }
gfariomw() { __gitwrap farom $* }
gfarom() { __gitwrap farom $* }
gc() { __gitwrap c $* }
gca() { __gitwrap ca $* }
gcaw() { __gitwrap caw $* }
gcawpf() { __gitwrap cawpf $* }
gcawpfn() { __gitwrap cawpfn $* }
gco() {  __gitwrap co $* }
gcod() {  __gitwrap cod $* }
gcom() { __gitwrap com $* }
gcof() { __gitwrap cof $* }
gcob() { __gitwrap co -b $* }
gb() { __gitwrap b $* }
gbd() { __gitwrap bd $* }
gba() { __gitwrap ba $* }
gbt() { __gitwrap bt $* }
gr() { __gitwrap r $* }
grr() { __gitwrap rr $* }
gri() { __gitwrap ri $* }
griwe() { __gitwrap riw $* }
gra() { __gitwrap ra $* }
grc() { __gitwrap rc $* }
grcw() { __gitwrap rcw $* }
grom() { __gitwrap rom $* }
griom() { __gitwrap riom $* }
griof() { __gitwrap riof $* }
griomw() { __gitwrap riomw $* }
griofw() { __gitwrap riofw $* }
grium() { __gitwrap rium $* }
grmbp() { __gitwrap rmbp $* }
grgrep() { __gitwrap rgrep $* }
gl() { __gitwrap l $* }
glg() { __gitwrap lg $* }
glgp() { __gitwrap lgp $* }
gls() { __gitwrap ls $* }
glgs() { __gitwrap lgs $* }
glgs() { __gitwrap lgs $* }

ga() { __gitwrap a $* }

gad() { __gitwrap ad $* }
gadc() { __gitwrap adc $* }
gadcn() { __gitwrap adcn $* }
gadca() { __gitwrap adca $* }
gadcaw() { __gitwrap adcaw $* }
gadcawn() { __gitwrap adcawn $* }
gadcawpf() { __gitwrap adcawpf $* }
gadcawpfn() { __gitwrap adcawpfn $* }
gadct() { __gitwrap adct $* }
gadcf() { __gitwrap adcf $* }
gadcfr() { __gitwrap adcfr $* }
gadcfrw() { __gitwrap adcfrw $* }
gadctpf() { __gitwrap adctpf $* }
gadctpfre() { __gitwrap adctpfre $* }

gag() { __gitwrap ag $* }
gagc() { __gitwrap agc $* }
gagcn() { __gitwrap agcn $* }
gagca() { __gitwrap agca $* }
gagcaw() { __gitwrap agcaw $* }
gagcawn() { __gitwrap agcawn $* }
gagcawpf() { __gitwrap agcawpf $* }
gagcawpfn() { __gitwrap agcawpfn $* }
gagct() { __gitwrap agct $* }
gagcf() { __gitwrap agcf $* }
gagcfr() { __gitwrap agcfr $* }
gagcfrw() { __gitwrap agcfrw $* }
gagctpf() { __gitwrap agctpf $* }
gagctpfre() { __gitwrap agctpfre $* }

gap() { __gitwrap ap $* }
gadp() { __gitwrap adp $* }
gagp() { __gitwrap agp $* }

gat() { __gitwrap at $* }
gbp() { __gitwrap bp $* }
gss() { __gitwrap ss $* }
gsh() { __gitwrap sh $* }
gct() { __gitwrap ct $* }
gcf() { __gitwrap cf $* }
gcg() { __gitwrap cg $* }
gcgg() { __gitwrap cgg $* }
ggg() { __gitwrap gg $* }
gt() { __gitwrap t $* }
gtt() { __gitwrap tt $* }
gtas() { __gitwrap tas $* }
gprmed() { __gitwrap prmed $* }
gprmee() { __gitwrap prmee $* }
gprmeed() { __gitwrap prmeed $* }
gprmeew() { __gitwrap prmeew $* }
gprmeedw() { __gitwrap prmeedw $* }

gsync() { __gitwrap sync $* }
gsy() { gsync $* }

# execute at the repository root!
ge() { __gitwrap e $* }
e()  { __gitwrap e $* }
gmake() { ge make $* }
# gg() { gmake $* }
ggs() { gmake test $* }

# git done.



# alias k="kubectl"
kg() { k get $* }
kga() { k get all $* }
kgp() { k get pods $* }
kgd() { k get deploy $* }
kgs() { k get service $* }
kd() { k delete $* }
kdp() { k delete pod $* }
kdd() { k delete deploy $* }
kl() { k logs $* } # (pod|deploy|...)_name
ke() { k exec $* } # -it pod_name bash
kaf() { k apply -f $* } # image_deployment.yaml
kd() { k describe $* }
kdp() { k describe pod $* }
kdd() { k describe deploy $* }

y() { yarn $* }
yd() { yarn dev $* || yarn develop $* || yarn start $* }
yy() { yd $* }
yb() { y build $* }
yw() { y watch $* }
ya() { y add $* }
yr() { y rm $* }
yt() { y test $* }

yg() { y global $* }
yga() { y global add $* }

rr() {
	cputils $*
}

# vscode
c() {
	vscodium $*
}

compdef c="code"

ci() {
	code-insiders $*
}

compdef ci="code"

drag() {
	dragon-drag-and-drop $*
}

# see also https://youtu.be/92uo5OBOKfY
fork() {
	# nohup $* &
	 setsid -f $* >/dev/null 2>&1
}
alias fo="setsid -f >/dev/null 2>&1 "

forkq() {
	fork $* && exit
}

za() {
	fork zathura $*
}

# taken from the 'Exec' entry once a desktop shortcut is created
postwoman() {
	/opt/google/chrome/google-chrome --profile-directory=Default --app-id=ljencpkfbmahjfhepjlnokmmfipcbcld $*
}


command -v nvim >/dev/null && alias vim="nvim" vimdiff="nvim -d" # Use neovim for vim if present.

# https://github.com/nvbn/thefuck
# removed because of https://github.com/nvbn/thefuck/issues/1018
###eval $(thefuck --alias)

# --- #

# auto-completions

### NOTE - only needed for bash!

## https://brbsix.github.io/2015/11/23/perform-tab-completion-for-aliases-in-bash/
#_completion_loader docker
#complete -F _docker d
#
#_completion_loader git
#complete -F _git config # config aka dotfile management from $HOME/.dotfiles
#complete -F _git co
#
#_completion_loader systemctl
#complete -F _systemctl S
#
#_completion_loader systemctl
#complete -F _systemctl SS
#
#_completion_loader pacman
#complete -F _pacman p
#
#_completion_loader pacman
#complete -F _pacman sp

# --- #

md() { pandoc -t markdown "$1" | less ;}

shdl() { curl -O "$(curl -s http://sci-hub.tw/"$*" | grep location.href | grep -o 'http.*pdf')" ;}
se() { du -a ~/.local/bin/* ~/.config/* | awk '{print $2}' | fzf | xargs  -r "$EDITOR" ;}
svcp() { vcopy "$(du -a ~/.local/bin/* ~/.config/* | awk '{print $2}' | fzf)" ;}
vf() { fzf | xargs -r -I % "$EDITOR" % ;}

# kill workspace (i3)
kw() {
	[ -n "$1" ] && workspace="$1" || {
		printf "noob gimme workspace numbah\n"
		return 1
	}

	i3-msg "[workspace=$workspace] kill"
}

bright() {
	[ -z "$1" ] && { echo "usage: bright [brightness %]"; return 1; }
	brightness="$(echo "$1 / 100" | bc -l)"
	echo "brightness $brightness"
	xrandr --output DP-0 --brightness "$brightness"
}

KO() {
	while (killall redshift); do echo KO; done
}

song() {
	[ -n "$1" ] && out="$1" || out="$(xclip -selection c -o)"
	printf "$out\n"
	[ -n "$out" ] && printf "$out\n" >> ~/songs
}

mc() { mkdir -p "$@" && cd $_; }
mkdc() { mc $* }
mk() { mc $* }
mkv() {
	mkdir -p "$@"
	rm "$@" -r
	$EDITOR "$@"
}

esl() { eslint --ext js,jsx,ts,tsx $* }
eslf() { esl $* --fix }
esldf() { esl . --fix }
eslfd() { esl . --fix }
esll() { esl . --fix }

# https://stackoverflow.com/questions/1401002/how-to-trick-an-application-into-thinking-its-stdout-is-a-terminal-not-a-pipe#comment72300162_20401674
faketty() {
    script -qfc "$(printf "%q " "$@")" /dev/null
}

xo() {
	xdg-open $*
}

xn() { cputils-new $* }
xr() { cputils-run $* }
xd() { cputils-run -a "-DDEBUG" $* }
xds() { cputils-run -a "-DDEBUG -Wl,--stack,$((2 ** 28))" $* } # __rlimit_t
xp() { cputils-run -a "-DEVAL"  $* }
xps() { cputils-run -a "-DEVAL  -Wl,--stack,$((2 ** 28))" $* } # __rlimit_t
 
pc()  { playerctl $* }
pcp() { playerctl play-pause $* }
pt()  { playerctl play-pause $* }
pn()  { playerctl next $* }
ppr() { playerctl previous $* }

psc() { ~/.local/bin/polybar-scripts/polybar-scripts/player-mpris-tail/player-mpris-tail.py $* }
raise() { ~/.local/bin/polybar-scripts/polybar-scripts/player-mpris-tail/player-mpris-tail.py raise $* }

gdbc() { cgdb $* }

cman() { cppman $* }
manc() { cppman $* }

# forward to cppman in case man doesn't work
# https://github.com/aitjcize/cppman/blob/master/bin/cppman
man() {
	/usr/bin/env man $* 2>/dev/null || cppman $*
}

tn() {
	tmux new -s $*
}

cclear() { printf "" | xsel --clipboard }

ca="--color=always"

sa() { ssh-add $* }

ba() { bat -P $* }

doc() { docker-compose $* }

kwsupd() {
	yarn global add @pipedrive/k8s-workstation@latest
}

# recursive shred + rm + n (how many)
shredrn() {
	N="$1"
	shift
	DIR="$1"
	shift
	[ -z "$DIR" ] && {
		printf "shredrn N DIR\n"
		return 1
	}
	! [ -d "$DIR" ] && {
		[ -f "$DIR" ] && {
			shred -zxfun${N} "$DIR"
			return 0
		}

		printf "DIR doesn't exist! (got \"$DIR\")\n"
		return 1
	}
	find "$DIR" -type f -exec shred -zxfun${N} $* {} \;
	rm -rf -v "$DIR"
}

shredr() {
	shredrn 30 $*
}

# generated with 'thefuck --alias'
fuck() {
    TF_PYTHONIOENCODING=$PYTHONIOENCODING;
    export TF_SHELL=zsh;
    export TF_ALIAS=fuck;
    TF_SHELL_ALIASES=$(alias);
    export TF_SHELL_ALIASES;
    TF_HISTORY="$(fc -ln -10)";
    export TF_HISTORY;
    export PYTHONIOENCODING=utf-8;
    TF_CMD=$(
        thefuck THEFUCK_ARGUMENT_PLACEHOLDER $@
    ) && eval $TF_CMD;
    unset TF_HISTORY;
    export PYTHONIOENCODING=$TF_PYTHONIOENCODING;
    test -n "$TF_CMD" && print -s $TF_CMD
}

pubwhat() {
	yarn pack $* && tar -xvzf *.tgz | sed '/^package$/d; s@^package/@@g;' && rm -rf package *.tgz >/dev/null
}

# networking
alias curla='curl -A "" -k -x 127.0.0.1:7777 '

catt() {
	local file_with_newline_path="/tmp/file-with-newline"

	printf "\n" > "$file_with_newline_path"

	cat $* "$file_with_newline_path"
}

catn() {
	catt $*
}
catnl() {
	catt $*
}

# find pog
xfind() {
	local DEPTH="$1"
	shift
	find . -type f -maxdepth $DEPTH -name $*
}

renamets() {
	find . -type f -name '*.js' | grep -v node_modules | cut -d'.' -f2 | xargs -I{} mv ".{}.js" ".{}.ts"
}

xlsattr() {
	/bin/ls -lOa $*
}

grepi() {
	grep -i $*
}

dif() {
	/usr/bin/env diff -u "$1" "$2" | diff-so-fancy
}

# ignore whitespace changes
difb() {
	/usr/bin/env diff -u -b "$1" "$2" | diff-so-fancy
}

# toggle
tog() {
	cwd="$(pwd)"
	mkdir -p ~/lost
	pushd ~/lost &&
	popd &&
	ls -la || {
		printf "$cwd\n" >> ~/lost/found
	}
}

umv() {
	mv "$2" "$1"
}

trim_extension() {
	printf "${1%.*}"
}
get_extension() {
	printf "${1##*.}"
}

off() {
	local pa="$1"

	[ -z "$pa" ] && {
		printf "off <pa>\n"
		return 1
	}

	ext="$(get_extension "$pa")"

	if [ -f "$pa.off" ] || [ -d "$pa.off" ] || [ "$ext" = "off" ]; then
		printf "already off. enable? [Y/n] "
		read -r ans

		if [ -z "$ans" ] || [ "$ans" = "y" ] || [ "$ans" = "Y" ]; then
			if [ -f "$pa.off" ] || [ -d "$pa.off" ]; then
				mv -v "$pa.off" "$pa"
			elif [ "$ext" = "off" ]; then
				mv -v "$pa" "$(trim_extension "$pa")"
			else
				>&2 printf "\nunhandled scenario, fix the 'off' script\n\n"
				return 1
			fi
		else
			return 0
		fi
	else 
		mv -v "$pa" "$pa.off"
	fi

	return 0
}
