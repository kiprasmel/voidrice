#!/bin/sh

# ifinstalled bc && echo "Welcome to the Calculator." && bc -lq 

NOT_BLOAT="/tmp/pystartuplmao.py"

cat > "$NOT_BLOAT" <<EOF
# generated via ~/.local/bin/calc

import sys
from math import *
from itertools import *
import numpy as np

sys.ps1 = "Î» "

# combinations
choose = comb
# choose(n, k) = factorial(n) // (factorial(k) * factorial(n-k))

# variations / arrangements / k-permutations 
# https://en.wikipedia.org/wiki/Permutation#k-permutations_of_n
def kperm(n, k):
	return factorial(n) // factorial(n - k)

variations = kperm

def is_prime(n):
	if n < 2: return False

	x = 2
	while (x * x <= n):
		if n % x == 0:
			return False
		x = x + 1

	return True

isPrime = is_prime

def factors(n):
	if n < 2: return []
	f = []
	x = 2
	while(x * x <= n):
		while(n % x == 0):
			f.append(x);
			n = n / x;

		x = x + 1

	if n > 1:
		f.append(n)
	
	return f

def primeFactors(n):
	return [isPrime(n), factors(n)]



# begin binary numbers & their representations

# need reversed string for formulas to work smoothly & correctly.
def rev(s):
	return s[::-1]

def padleft(x, w, padder="0", log=False):
	d = w - len(x)
	x = (padder * d) + x
	if log:
		print(f"padding left with {d} elements of value {padder}. x = {x}")
	return x

# binary to unsigned
#
# b2u("1010") => 8 + 2 => 10
#
def b2u(x, w=None):
	x = rev(x)

	if w == None:
		w = len(x)

	if w > len(x):
		# x = padleft(x, w)
		raise "TODO: this should be implemented as number extension"

	assert len(x) == w, "word size does not match bit vector length."

	sum = 0
	for i in range(0, (w-1)+1):
		sum = sum + int(x[i]) * 2**i
	return sum

# binary to two's complement
#
# b2t("1010") => -8 + 2 => -6
#
def b2t(x, w=None):
	x = rev(x)
	
	if w == None:
		w = len(x)

	if w > len(x):
		# x = padleft(x, w)
		raise "TODO: this should be implemented as number extension"
	
	assert len(x) == w, "word size does not match bit vector length."

	sum = 0
	for i in range(0, w-1):
		sum = sum + int(x[i]) * 2**i

	sum = sum - (int(x[w-1]) * 2**(w-1))

	return sum

# convert width of base10 number to base2
# e.g. 10u => 0b1010 (w=4) (unsigned width to binary width)
# e.g. -6  => 0b1010 (w=4) (signed   width to binary width)
def bin_width(t, is_signed=False):
	w = 0
	if t > 0 and is_signed:
		w = w + 1
	if t < 0:
		t = abs(t) - 1
		w = w + 1
	
	w = w + floor(log2(t) + 1)

	return w

def u2b(u, w=None):
	if (w == None):
		w = bin_width(u, is_signed=False)

	assert (u < (1<<w)), "width too small to fit number."

	b = ""
	for i in rev(range(0, w)):
		if (u & (1<<i)):
			b = b + "1"
		else:
			b = b + "0"
	
	return b

# two's complement to binary. (w)idth should account for sign bit
def t2b(t, w=None):
	if (w == None):
		w = bin_width(t, is_signed=True)
	
	if (t < 0):
		assert (t > -(1<<(w-1))-1), "width too small to fit number."

		neg = (1<<(w-1)) # negative strength
		pos = neg + t # the leftover positive needed to add
		
		b = "1" + u2b(pos, w-1)
		return b
	else:
		assert (t < (1<<(w-1))), "width too small to fit number."

		# -1 because sign bit,
		# +1 because bit_width does not account for it for non-negative nums.
		#b = "0" + u2b(t, w-1+1)

		# got rid of the previous "0" prefix,
		# because added the assertion to force the number to fit,
		# thus works out automatically.
		b =        u2b(t, w-1+1)
		return b

def u2t(u, w=None):
	return b2t(u2b(u, w), w)

def t2u(t, w=None):
	return b2u(t2b(t, w), w)

# two's complement to two's complement, but trimmed or extended
# TODO: make part of t2b: rename t2b to t2b_samelen, create t2b_trim_extend, and create t2b to outsource to either.
def t2t(t, w1, w2):
	delta = w2 - w1
	print(f"delta {delta}")
	if (delta < 0):
		return t_trim(t, w1, w2)
	elif (delta > 0):
		return t_ext(t, w1, w2)
	else:
		print("nothing to do since w1 == w2")
		return t

def u2u(u, w1, w2):
	delta = w2 - w1
	print(f"delta {delta}")
	if (delta < 0):
		return u_trim(u, w1, w2)
	elif (delta > 0):
		return u_ext(u, w1, w2)
	else:
		print("nothing to do since w1 == w2")
		return u

# trim/truncate
def t_trim(t, w1, w2, to_bits=t2b, from_bits=b2t):
	if w1 == w2:
		print("w1 == w2, nothing to do")
		return t
	assert w1 > w2, "cannot trim from smaller to bigger"

	b0 = to_bits(t, w1)

	# keep only w2 bits (least significant - right to left)
	b = b0[-w2:]

	print(format_before_after(b0, b, pre="bits ", join="\n"))

	# convert the w2 bits into the two's complement representation.
	# if the w2 bit (the new most significant bit / sign bit) is 1,
	# then the result will be negative, irrespective of the previous sign bit.
	return from_bits(b, w2)

t_trunc = t_trim

def u_trim(u, w1, w2):
	return t_trim(u, w1, w2, to_bits=u2b, from_bits=b2u)

u_trunc = u_trim

# extend
def t_ext(t, w1, w2):
	if w1 == w2:
		print("w1 == w2, nothing to do")
		return t
	assert w2 > w1, "cannot extend from bigger to smaller"

	b0 = t2b(t, w1)

	# most significant bit is at pos 0, since we didn't reverse
	# TODO: consistency w/ reversing or not reversing at all.
	orig_sign_bit = b0[0]

	print(f"orig_sign_bit: {orig_sign_bit}")

	# extend w2-w1 bits with the same value as orig_sign_bit.
	b = padleft(b0, w2, orig_sign_bit)

	print(format_before_after(b0, b, pre="bits ", join="\n"))

	# re-interpret as two's complement
	return b2t(b, w2)

def u_ext(u, w1, w2):
	if w1 == w2:
		print("w1 == w2, nothing to do")
		return u
	assert w2 > w1, "cannot extend from bigger to smaller"

	b0 = u2b(u, w1)

	b = padleft(b0, w2, "0")

	print(format_before_after(b0, b, pre="bits ", join="\n"))

	return b2u(b, w2)

def format_before_after(before, after, fill=" ", pre="", post="", join=None):
	b_len = len(before)
	a_len = len(after)
	max_len = max(b_len, a_len)

	b_delta = max_len - b_len
	a_delta = max_len - a_len

	before = (fill * b_delta) + before
	after =  (fill * a_delta) + after

	b = pre + "before: " + before + "  len: " + str(b_len) + post
	a = pre + "after:  " + after  + "  len: " + str(a_len) + post
	ret = [b, a]
	if join is None:
		return ret
	else:
		return join.join(ret)

# sign magnitude to binary
def s2b(s, w=None):
	if (w == None):
		raise "TODO"
	
	b = ""
	# TODO: +0 vs -0
	if (s < 0):
		b = "1" + u2b(-s, w-1)
	else:
		b = "0" + u2b(s, w-1)

	return b

# end binary numbers & their representations



EOF

python3 -i "$NOT_BLOAT"

