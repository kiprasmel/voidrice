#!/bin/sh

# This script will compile or run another finishing operation on a document. I
# have this script run via vim.
#
# Compiles .tex. groff (.mom, .ms), .rmd, .md.  Opens .sent files as sent
# presentations.  Runs scripts based on extention or shebang

file=$(readlink -f "$1")
dir=$(dirname "$file")
base="${file%.*}"

cd "$dir" || exit

textype() { \
	command="pdflatex"
	( sed 5q "$file" | grep -i -q 'xelatex' ) && command="xelatex"
	$command --output-directory="$dir" "$base" &&
	grep -i addbibresource "$file" >/dev/null &&
	biber --input-directory "$dir" "$base" &&
	$command --output-directory="$dir" "$base" &&
	$command --output-directory="$dir" "$base"
	}

case "$file" in
	*config.h) sudo make install ;;
	*\.c) cc "$file" -o "$base" && "$base" ;;
	*\.cpp) cputils-run -a "-DDEBUG" "$file" -f  ;;
	*\.txt) cputils-run -a "-DDEBUG" "$file" -f  ;; # might run from the input file, thus aliasing
	*\.js)
		# replaces filename of dots into first & last segment,
		# so that the original .txt file can be used.
		#
		# e.g.:
		# /foo/bar/1.js                                         -> /foo/bar/1.js
		# /foo/bar/1.functional.js                              -> /foo/bar/1.js
		# /foo/bar/1.a.b.c.d.e.f.js                             -> /foo/bar/1.js
		# /foo/bar.troll/1.a.b.c.d.e.f.js                 -> /foo/bar.troll/1.js
		# /foo/bar.troll.tryhard/1.a.b.c.d.e.f.js -> /foo/bar.troll.tryhard/1.js
		#
		#node -pe "'$file'.split('.').copyWithin(1, -1).slice(0, 2).join('.')"
		#node -pe "'$file'.split('.').copyWithin(1, -1).slice(0, 2).join('.')"
		file_midless="$(printf "$file" | sed -E 's/(\w)\.[^/]*(\.\w*)$/\1\2/g' )"

		# instead of 1.js.txt, we can use 1.txt as well.
		file_midless_extless="$(printf "$file_midless" | sed -E 's/(\w*)\.\w*$/\1/g' )"

		if [ -f "$file.txt" ];                   then cat "$file.txt"                 | node "$file"
		elif [ -f "$file_midless.txt" ];         then cat "$file_midless.txt"         | node "$file"
		elif [ -f "$file_midless_extless.txt" ]; then cat "$file_midless_extless.txt" | node "$file"
		else                                                                            node "$file"
		fi
		;;
	*\.ts) ts-node-dev "$file" ;;
	*\.py) python "$file" ;;
	*\.go) go run "$file" ;;
	*\.md) pandoc "$file" --pdf-engine=xelatex -o "$base".pdf ;;
	*\.[rR]md) Rscript -e "require(rmarkdown); rmarkdown::render('$file', quiet=TRUE)" ;;
	*\.tex) textype "$file" ;;
	*\.ms) refer -PS -e "$file" | groff -me -ms -kept -T pdf > "$base".pdf ;;
	*\.mom) refer -PS -e "$file" | groff -mom -kept -T pdf > "$base".pdf ;;
	*\.[0-9]) refer -PS -e "$file" | groff -mandoc -T pdf > "$base".pdf ;;
	*\.m) octave "$file" ;;
	*\.sent) setsid sent "$file" 2>/dev/null & ;;
	*) sed 1q "$file" | grep "^#!/" | sed "s/^#!//" | xargs -r -I % "$file" ;;
esac

