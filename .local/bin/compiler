#!/bin/sh

# This script will compile or run another finishing operation on a document. I
# have this script run via vim.
#
# Compiles .tex. groff (.mom, .ms), .rmd, .md, .org.  Opens .sent files as sent
# presentations. Runs scripts based on extension or shebang.
#
# Note that .tex files which you wish to compile with XeLaTeX should have the
# string "xelatex" somewhere in a comment/command in the first 5 lines.

file=$(readlink -f "$1")
dir=${file%/*}
base="${file%.*}"
ext="${file##*.}"

cd "$dir" || exit 1

textype() { \
	command="pdflatex"
	( head -n5 "$file" | grep -qi 'xelatex' ) && command="xelatex"
	$command --output-directory="$dir" "$base" &&
	grep -qi addbibresource "$file" &&
	biber --input-directory "$dir" "$base" &&
	$command --output-directory="$dir" "$base" &&
	$command --output-directory="$dir" "$base"
}

case "$file" in
	*config.h) sudo make install ;;
	*\.c) cc "$file" -o "$base" && "$base" ;;
	*\.cpp) cputils-run -a "-DDEBUG" "$file" -f  ;;
	*\.cs) mcs "$file" && mono "$base".exe ;;
	*\.go) go run "$file" ;;
	*\.h) sudo make install ;;
	*\.java) javac -d classes "$file" && java -cp classes "${1%.*}" ;;
	*\.txt) cputils-run -a "-DDEBUG" "$file" -f  ;; # might run from the input file, thus aliasing
	*\.js)
		# replaces filename of dots into first & last segment,
		# so that the original .txt file can be used.
		#
		# e.g.:
		# /foo/bar/1.js                                         -> /foo/bar/1.js
		# /foo/bar/1.functional.js                              -> /foo/bar/1.js
		# /foo/bar/1.a.b.c.d.e.f.js                             -> /foo/bar/1.js
		# /foo/bar.troll/1.a.b.c.d.e.f.js                 -> /foo/bar.troll/1.js
		# /foo/bar.troll.tryhard/1.a.b.c.d.e.f.js -> /foo/bar.troll.tryhard/1.js
		#
		#node -pe "'$file'.split('.').copyWithin(1, -1).slice(0, 2).join('.')"
		#node -pe "'$file'.split('.').copyWithin(1, -1).slice(0, 2).join('.')"
		file_midless="$(printf "$file" | sed -E 's/(\w)\.[^/]*(\.\w*)$/\1\2/g' )"

		# instead of 1.js.txt, we can use 1.txt as well.
		file_midless_extless="$(printf "$file_midless" | sed -E 's/(\w*)\.\w*$/\1/g' )"


		if [ -f "$file.txt" ]; then f="$file.txt"
		elif [ -f "$file_midless.txt" ]; then f="$file_midless.txt"
		elif [ -f "$file_midless_extless.txt" ]; then f="$file_midless_extless.txt"
		fi

		# todo backport to all?
		#
		# todo args also for the executor, and then for the program itself,
		# on 1st line & 2nd line of file?
		#
		if [ -f "$file.args" ]; then
			args="$(cat "$file.args")"

			echo "args $args"

			if [ -f "$f" ]; then cat "$f" | node "$file" $args; else node "$file" $args; fi
		else
			echo "no args"
			
			if [ -f "$f" ]; then cat "$f" | node "$file"      ; else node "$file"      ; fi
		fi

		;;
	*\.ts) ts-node-dev "$file" ;;
	*\.py) python "$file" ;;
	*\.go) go run "$file" ;;
	*\.md)	if  [ -x "$(command -v lowdown)" ]; then
			lowdown --parse-no-intraemph "$file" -Tms | groff -mpdfmark -ms -kept > "$base".pdf
		elif [ -x "$(command -v groffdown)" ]; then
			groffdown -i "$file" | groff > "$base.pdf"
		else
			pandoc -t ms --highlight-style=kate -s -o "$base".pdf "$file"
		fi ; ;;
	*\.[rR]md) Rscript -e "rmarkdown::render('$file', quiet=TRUE)" ;;
	*\.ms) refer -PS -e "$file" | groff -me -ms -kept -T pdf > "$base".pdf ;;
	# *\.ms) preconv "$file" | refer -PS -e | groff -me -ms -kept -T pdf > "$base".pdf ;; # TODO merge investigate
	*\.mom) refer -PS -e "$file" | groff -mom -kept -T pdf > "$base".pdf ;;
	# *\.mom) preconv "$file" | refer -PS -e | groff -mom -kept -T pdf > "$base".pdf ;; # TODO merge investigate
	*\.org) emacs "$file" --batch -u "$USER" -f org-latex-export-to-pdf ;;
	*\.[0-9]) refer -PS -e "$file" | groff -mandoc -T pdf > "$base".pdf ;;
	# *\.[0-9]) preconv "$file" | refer -PS -e | groff -mandoc -T pdf > "$base".pdf ;; # TODO merge investigate
	*\.m) octave "$file" ;;
	*\.rs) cargo build ;;
	*\.sass) sassc -a "$file" "$base.css" ;;
	*\.scad) openscad -o "$base".stl "$file" ;;
	*\.sent) setsid sent "$file" 2>/dev/null & ;;
	*\.tex) textype "$file" ;;
	*) sed -n '/^#!/s/^#!//p; q' "$file" | xargs -r -I % "$file" ;;
esac
