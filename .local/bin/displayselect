#!/usr/bin/env bash

# A UI for detecting and selecting all displays. Probes xrandr for connected
# displays and lets user select one to use. User may also select "manual
# selection" which opens arandr.
#
# see also `mon2` script
# for quickly applying predefined monitor configurations.
#

# BEGIN CUSTOM_ASKER
PREDEFINED_CHOICES=("$@")
PREDEFINED_CHOICES_IDX=0

# SHALL NOT be called inside a subshell,
# e.g. $(ask "foo" "bar"),
# because won't modify "PREDEFINED_CHOICES_IDX".
#
# use MY_VAR=$(ans)
#
_ask() {
	if test ${#PREDEFINED_CHOICES[@]} -gt $PREDEFINED_CHOICES_IDX; then
		choice="${PREDEFINED_CHOICES[$PREDEFINED_CHOICES_IDX]}"
		# PREDEFINED_CHOICES_IDX=$(( PREDEFINED_CHOICES_IDX + 1 ))
		# PREDEFINED_CHOICES_IDX+=1
		# echo "$choice. idx=$PREDEFINED_CHOICES_IDX" >> choices

		PREDEFINED_CHOICES_IDX=$(( PREDEFINED_CHOICES_IDX + 1 ))

		printf "$choice"
	else
		question="$1"
		choices="$2"
		shift
		shift

		printf "$choices" | dmenu -i -p "$question"
	fi
}

ANS_DIR_PATH="/tmp/monitors/$$"
mkdir -p "$ANS_DIR_PATH"
ANS_FILEPATH="$ANS_DIR_PATH/ans"
ask() {
	_ask $* > "$ANS_FILEPATH"
}
ans() {
	cat "$ANS_FILEPATH"
}
# END CUSTOM_ASKER

twoscreen() { # If multi-monitor is selected and there are two screens.
    ask "Mirror displays?" "no\\nyes"
	mirror=$(ans)
    # Mirror displays using native resolution of external display and a scaled
    # version for the internal display
    if [ "$mirror" = "yes" ]; then
		ask "Optimize resolution for:" "$screens"
        external=$(ans)
        internal=$(grep -v "$external" "$screens")

        res_external=$(xrandr --query | sed -n "/^$external/,/\+/p" | \
            tail -n 1 | awk '{print $1}')
        res_internal=$(xrandr --query | sed -n "/^$internal/,/\+/p" | \
            tail -n 1 | awk '{print $1}')

        res_ext_x=$(echo "$res_external" | sed 's/x.*//')
        res_ext_y=$(echo "$res_external" | sed 's/.*x//')
        res_int_x=$(echo "$res_internal" | sed 's/x.*//')
        res_int_y=$(echo "$res_internal" | sed 's/.*x//')

        scale_x=$(echo "$res_ext_x / $res_int_x" | bc -l)
        scale_y=$(echo "$res_ext_y / $res_int_y" | bc -l)

        xrandr --output "$external" --auto --scale 1.0x1.0 \
            --output "$internal" --auto --same-as "$external" \
            --scale "$scale_x"x"$scale_y"
    else
		ask "Select primary display:" "$screens"
        primary=$(ans)
        secondary=$(echo "$screens" | grep -v "$primary")
		ask "What side of $primary should $secondary be on?" "left\\nright"
        direction=$(ans)
        xrandr --output "$primary" --auto --scale 1.0x1.0 --output "$secondary" --"$direction"-of "$primary" --auto --scale 1.0x1.0
    fi
    }

morescreen() { # If multi-monitor is selected and there are more than two screens.
	ask "Select primary display:" "$screens"
	primary=$(ans)

	secondary_choices="$(echo "$screens" | grep -v "$primary")"
	ask "Select secondary display:" "$secondary_choices"
	secondary=$(ans)

	ask "What side of $primary should $secondary be on?" "left\\nright"
	direction=$(ans)

	tertiary_choices="$(echo "$screens" | grep -v "$primary" | grep -v "$secondary")"
	ask "Select third display:" "$tertiary_choices"
	tertiary=$(ans)
	xrandr --output "$primary" --auto --output "$secondary" --"$direction"-of "$primary" --auto --output "$tertiary" --"$(printf "left\\nright" | grep -v "$direction")"-of "$primary" --auto
	}

multimon() { # Multi-monitor handler.
	case "$(echo "$screens" | wc -l)" in
		2) twoscreen ;;
		*) morescreen ;;
	esac ;}

onescreen() { # If only one output available or chosen.
	xrandr --output "$1" --auto --scale 1.0x1.0 $(echo "$allposs" | grep -v "\b$1" | awk '{print "--output", $1, "--off"}' | paste -sd ' ' -)
	}

postrun() { # Stuff to run to clean up.
	setbg		# Fix background if screen size/arangement has changed.
	remaps		# Re-remap keys if keyboard added (for laptop bases)
	{ killall dunst ; setsid -f dunst ;} >/dev/null 2>&1 # Restart dunst to ensure proper location on screen
	}

# Get all possible displays
allposs=$(xrandr -q | grep "connected")

# Get all connected screens.
screens=$(echo "$allposs" | awk '/ connected/ {print $1}')

# If there's only one screen
[ "$(echo "$screens" | wc -l)" -lt 2 ] &&
	{ onescreen "$screens"; postrun; notify-send "ðŸ’» Only one screen detected." "Using it in its optimal settings...";  exit ;}

# Get user choice including multi-monitor and manual selection:
ask "Select display arangement:" "$screens\\nmulti-monitor\\nmanual selection" &&
chosen=$(ans) &&
case "$chosen" in
	"manual selection") arandr ; exit ;;
	"multi-monitor") multimon ;;
	*) onescreen "$chosen" ;;
esac

postrun
